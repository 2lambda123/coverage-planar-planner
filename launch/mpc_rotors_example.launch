<launch>



<arg name="mav_name" default="firefly"/>
<arg name="world_name" default="basic"/>
<arg name="enable_logging" default="false"/>
<arg name="enable_ground_truth" default="true"/>
<arg name="log_file" default="$(arg mav_name)"/>





<env name="GAZEBO_MODEL_PATH" value="$(find rotors_gazebo)/models"/>
<include file="$(find gazebo_ros)/launch/empty_world.launch">
  <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world"/>
  <!-- <arg name="debug" value="true" /> -->
  <arg name="paused" value="true" />
  <!-- <arg name="gui" value="false" /> -->
</include>


<group ns="$(arg mav_name)">

  <rosparam param='altitude'>0.5</rosparam>

  <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
    <arg name="mav_name" value="$(arg mav_name)" />
    <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
    <arg name="enable_logging" value="$(arg enable_logging)" />
    <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
  </include>

  <!--node name="lee_position_controller_node" pkg="rotors_control"
      type="lee_position_controller_node" output="screen">
    <remap from="odometry" to="ground_truth/odometry" />
  </node-->

  <node
    name="mav_linear_mpc"
    pkg="mav_linear_mpc"
    type="mav_linear_mpc_node_controller_only"
    respawn="false"
    clear_params="true"
    output="screen">
    <remap from="odometry" to="ground_truth/odometry" />
    <rosparam file="$(find mav_linear_mpc)/parameters/linear_mpc.yaml" />
  </node>

  <node
    name="PD_attitude_controller"
    pkg="mav_linear_mpc"
    type="PD_attitude_controller_node"
    respawn="true"
    clear_params="true"
    output="screen">
    <remap from="odometry" to="ground_truth/odometry" />
    <rosparam file="$(find mav_linear_mpc)/parameters/PD_attitude.yaml" />
  </node>

  <node
    name='takeoff_node'
    pkg='coverage_planar_planner'
    type='takeoff_node.py'>
    <remap from='odometry' to='ground_truth/odometry'/>
    <remap from='cmd_traj' to='command/trajectory'/>
  </node>

  <node
  name='planner_node'
  pkg='coverage_planar_planner'
  type='planner_node.py'
  />

  <node
      name='plotter_node'
      pkg='coverage_planar_planner'
      type='plotter_node.py'>
  </node>

  <!--node
  name='simulator_node'
  pkg='coverage_planar_planner'
  type='simulator_node.py'
  /-->



  <node
      name='odometry_to_pose_bridge'
      pkg='coverage_planar_planner'
      type='odometry_to_pose_bridge.py'>
    <remap from="odometry" to="ground_truth/odometry" />
  </node>


  <node
      name='cmd_vel_to_cmd_traj_bridge'
      pkg='coverage_planar_planner'
      type='cmd_vel_to_cmd_traj_bridge.py'>
    <!--remap from="odometry" to="ground_truth/odometry" /-->
    <remap from="cmd_traj" to="command/trajectory"/>
    <!--remap from="cmd_pose" to="UNUSED/pose" /-->
  </node>


  <node
  name='rqt_service_caller'
  pkg='rqt_service_caller'
  type='rqt_service_caller'
  />

  <!--node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/-->
  <!--node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" /-->
  <!--node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /-->

</group>



</launch>
